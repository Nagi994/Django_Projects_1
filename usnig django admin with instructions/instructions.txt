start_postgres


Install these must-have packages before you setup the environment to access postgres.
1
2
pip install --upgrade distro-info
pip3 install --upgrade pip==23.2.1



Install the Psycopg adapter:
1
pip install psycopg2-binary==2.9.7




If the terminal was not open, go to Terminal > New Terminal and make sure your current Theia directory is /home/project.

Run the following command-lines to download a code template for this lab
1
2
3
wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-CD0251EN-SkillsNetwork/labs/m4_django_app/lab2_template.zip"  
unzip lab2_template.zip
rm lab2_template.zip







Next, we need to set up a proper runtime environment for Django app.

If the terminal was not open, go to Terminal > New Terminal and cd to the project folder
1
cd lab2_template
Copied!
Let’s set up a virtual environment which has all the packages we need.

1
2
3
4
5
pip install virtualenv
virtualenv djangoenv
source djangoenv/bin/activate
Copied!
1
pip install -r requirements.txt
Copied!
The requirements.txt contains all necessary Python packages for you to run this lab.

Open settings.py file located in myproject directory and find DATABASES section, and replace the value of PASSWORD with the one generated by PostgreSQL password.
Next, activate the models for an onlinecourse app which will be managed by admin site.

You need to perform migrations to create necessary tables
1
python3 manage.py makemigrations
Copied!
and run migration
1
python3 manage.py migrate






Before you can access admin site, you will need to create a super user for the admin site.

Run this command to create a new superuser:
1
python3 manage.py createsuperuser
Copied!
With Username, Email, Password entered, you should see a message indicates the super user is created:
1
Superuser created successfully.
Copied!

Let's start our app and login with the super user.

Start the development server
1
python3 manage.py runserver
Copied!
Click on the Skills Network button on the left, it will open the “Skills Network Toolbox”. Then click the Other then Launch Application. From there you should be able to enter the port 8000 and launch.







When the browser tab opens, add the /admin path and your full URL should look like the following
https://userid-8000.theiadocker-1.proxy.cognitiveclass.ai/admin

Login with the user name and password for the super user, then you should see
admin site with only Groups and Users entries created for us. These two tables
are created by Django by default for authentication and authorization purposes.










Once you register models defined in adminsite/models.py with admin site, you can then create managing pages for those models.

Open adminsite/admin.py, and register Course and Instructor models
1
2
3
admin.site.register(Course)
admin.site.register(Instructor)
Copied!
Now refresh the admin site, and you should be able to see Courses and Instructors
under ADMINSITE section.
Let's create an instructor first. For simplification, we can assign the super user to be an instructor.

Click the green Add button in the Instructors row

For the User field, choose the super user you just created:




You may only want to include some of the model fields in the admin site.

To select the fields to be included, we create a ModelAdmin class and add a fields list with the field names to be included.

Open adminsite/admin.py, add a CourseAdmin class:
1
2
class CourseAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'name', 'description']
Copied!
Update previous course registration admin.site.register(Course) with the CourseAdmin class:
1
2
admin.site.register(Course, CourseAdmin)








Coding Practice: Customize Fields for Instructor Model
Include only user and Full Time fields for Instructor model.

1
2
3
4
class InstructorAdmin(admin.ModelAdmin):
    fields = #<HINT> add user, full_time field names here#
admin.site.register(Instructor, InstructorAdmin)
Copied!
Click here to see solution
1
2
3
4
class InstructorAdmin(admin.ModelAdmin):
    fields = ['user', 'full_time']
admin.site.register(Instructor, InstructorAdmin)










Associate Related Models
In previous coding practice, you were asked to include user model, which acts as a parent model for instructor, and you can add such related object while creating an Instructor object.

Django admin provides a convenient way to associate related objects on a single model managing page. This can be done by defining Inline classes.


Let's try to manage Lesson model together with Course model on Course admin page.

Open adminsite/admin.py, add a LessonInline class before CourseAdmin:
1
2
3
class LessonInline(admin.StackedInline):
    model = Lesson 
    extra = 5
Copied!
And update CourseAdmin class by adding a inlines list
1
2
3
class CourseAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'name', 'description']
    inlines = [LessonInline]
